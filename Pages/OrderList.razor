@page "/order-list"
@using static SalesforceServices
@inject SalesforceServices SFService
@inject NavigationManager NavigationManager

<h3>Orders</h3>

@if (IsLoading)
{
    <p>Loading orders...</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color: red;"><strong>Error:</strong> @ErrorMessage</p>
}
else if (Orders.Count == 0)
{
    <p>No orders found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Order Number</th>
                <th>Name</th>
                <th>Status</th>
                <th>Account ID</th>
                <th>Total Amount</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in Orders)
            {
                <tr>
                    <td>@order.OrderNumber</td>
                    <td>@order.Name</td>
                    <td>@order.Status</td>
                    <td>@order.AccountId</td>
                    <td>@order.TotalAmount?.ToString("C")</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="() => EditOrder(order.OrderNumber)">Edit</button>
                        @if (order.Status == "Activated")
                        {
                            <button class="btn btn-success btn-sm" @onclick="() => CreateEDI(order.OrderNumber)">Create EDI PO</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Order> Orders = new();
    private string ErrorMessage = "";
    private bool IsLoading = true;
    private string accessToken = "";
    protected override async Task OnInitializedAsync()
    {
        try
        {
             accessToken = await SFService.GetAccessTokenAsync();
            Orders = await SFService.GetOrdersAsync(accessToken);
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void EditOrder(string orderId)
    {
        // Navigate to an edit page with the order ID as a parameter
        NavigationManager.NavigateTo($"/edit-order/{orderId}");
    }

    private async Task CreateEDI(string OrderNumber)
    {
        try
        {
            // Call a service to create an EDI PO for the given order ID
            await SFService.CreateEDIPOAsync(accessToken, OrderNumber);
            // Optionally display a success message or refresh the list
            Console.WriteLine($"EDI PO created for Order ID: {OrderNumber}");
        }
        catch (Exception ex)
        {
            // Handle any errors
            Console.WriteLine($"Failed to create EDI PO for Order ID: {OrderNumber}, Error: {ex.Message}");
        }
    }
}
